[
    {
        "label": "admin",
        "importPath": "django.contrib",
        "description": "django.contrib",
        "isExtraImport": true,
        "detail": "django.contrib",
        "documentation": {}
    },
    {
        "label": "admin",
        "importPath": "django.contrib",
        "description": "django.contrib",
        "isExtraImport": true,
        "detail": "django.contrib",
        "documentation": {}
    },
    {
        "label": "admin",
        "importPath": "django.contrib",
        "description": "django.contrib",
        "isExtraImport": true,
        "detail": "django.contrib",
        "documentation": {}
    },
    {
        "label": "admin",
        "importPath": "django.contrib",
        "description": "django.contrib",
        "isExtraImport": true,
        "detail": "django.contrib",
        "documentation": {}
    },
    {
        "label": "AppConfig",
        "importPath": "django.apps",
        "description": "django.apps",
        "isExtraImport": true,
        "detail": "django.apps",
        "documentation": {}
    },
    {
        "label": "AppConfig",
        "importPath": "django.apps",
        "description": "django.apps",
        "isExtraImport": true,
        "detail": "django.apps",
        "documentation": {}
    },
    {
        "label": "AppConfig",
        "importPath": "django.apps",
        "description": "django.apps",
        "isExtraImport": true,
        "detail": "django.apps",
        "documentation": {}
    },
    {
        "label": "get_user_model",
        "importPath": "django.contrib.auth",
        "description": "django.contrib.auth",
        "isExtraImport": true,
        "detail": "django.contrib.auth",
        "documentation": {}
    },
    {
        "label": "FilterSet",
        "importPath": "django_filters.rest_framework",
        "description": "django_filters.rest_framework",
        "isExtraImport": true,
        "detail": "django_filters.rest_framework",
        "documentation": {}
    },
    {
        "label": "filters",
        "importPath": "django_filters.rest_framework",
        "description": "django_filters.rest_framework",
        "isExtraImport": true,
        "detail": "django_filters.rest_framework",
        "documentation": {}
    },
    {
        "label": "DjangoFilterBackend",
        "importPath": "django_filters.rest_framework",
        "description": "django_filters.rest_framework",
        "isExtraImport": true,
        "detail": "django_filters.rest_framework",
        "documentation": {}
    },
    {
        "label": "Ingredient",
        "importPath": "recipes.models",
        "description": "recipes.models",
        "isExtraImport": true,
        "detail": "recipes.models",
        "documentation": {}
    },
    {
        "label": "Recipe",
        "importPath": "recipes.models",
        "description": "recipes.models",
        "isExtraImport": true,
        "detail": "recipes.models",
        "documentation": {}
    },
    {
        "label": "Tag",
        "importPath": "recipes.models",
        "description": "recipes.models",
        "isExtraImport": true,
        "detail": "recipes.models",
        "documentation": {}
    },
    {
        "label": "Ingredient",
        "importPath": "recipes.models",
        "description": "recipes.models",
        "isExtraImport": true,
        "detail": "recipes.models",
        "documentation": {}
    },
    {
        "label": "IngredientInRecipe",
        "importPath": "recipes.models",
        "description": "recipes.models",
        "isExtraImport": true,
        "detail": "recipes.models",
        "documentation": {}
    },
    {
        "label": "Recipe",
        "importPath": "recipes.models",
        "description": "recipes.models",
        "isExtraImport": true,
        "detail": "recipes.models",
        "documentation": {}
    },
    {
        "label": "Tag",
        "importPath": "recipes.models",
        "description": "recipes.models",
        "isExtraImport": true,
        "detail": "recipes.models",
        "documentation": {}
    },
    {
        "label": "Favorite",
        "importPath": "recipes.models",
        "description": "recipes.models",
        "isExtraImport": true,
        "detail": "recipes.models",
        "documentation": {}
    },
    {
        "label": "Ingredient",
        "importPath": "recipes.models",
        "description": "recipes.models",
        "isExtraImport": true,
        "detail": "recipes.models",
        "documentation": {}
    },
    {
        "label": "IngredientInRecipe",
        "importPath": "recipes.models",
        "description": "recipes.models",
        "isExtraImport": true,
        "detail": "recipes.models",
        "documentation": {}
    },
    {
        "label": "Recipe",
        "importPath": "recipes.models",
        "description": "recipes.models",
        "isExtraImport": true,
        "detail": "recipes.models",
        "documentation": {}
    },
    {
        "label": "ShoppingCart",
        "importPath": "recipes.models",
        "description": "recipes.models",
        "isExtraImport": true,
        "detail": "recipes.models",
        "documentation": {}
    },
    {
        "label": "Tag",
        "importPath": "recipes.models",
        "description": "recipes.models",
        "isExtraImport": true,
        "detail": "recipes.models",
        "documentation": {}
    },
    {
        "label": "SAFE_METHODS",
        "importPath": "rest_framework.permissions",
        "description": "rest_framework.permissions",
        "isExtraImport": true,
        "detail": "rest_framework.permissions",
        "documentation": {}
    },
    {
        "label": "BasePermission",
        "importPath": "rest_framework.permissions",
        "description": "rest_framework.permissions",
        "isExtraImport": true,
        "detail": "rest_framework.permissions",
        "documentation": {}
    },
    {
        "label": "SAFE_METHODS",
        "importPath": "rest_framework.permissions",
        "description": "rest_framework.permissions",
        "isExtraImport": true,
        "detail": "rest_framework.permissions",
        "documentation": {}
    },
    {
        "label": "AllowAny",
        "importPath": "rest_framework.permissions",
        "description": "rest_framework.permissions",
        "isExtraImport": true,
        "detail": "rest_framework.permissions",
        "documentation": {}
    },
    {
        "label": "IsAuthenticated",
        "importPath": "rest_framework.permissions",
        "description": "rest_framework.permissions",
        "isExtraImport": true,
        "detail": "rest_framework.permissions",
        "documentation": {}
    },
    {
        "label": "base64",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "base64",
        "description": "base64",
        "detail": "base64",
        "documentation": {}
    },
    {
        "label": "ContentFile",
        "importPath": "django.core.files.base",
        "description": "django.core.files.base",
        "isExtraImport": true,
        "detail": "django.core.files.base",
        "documentation": {}
    },
    {
        "label": "F",
        "importPath": "django.db.models",
        "description": "django.db.models",
        "isExtraImport": true,
        "detail": "django.db.models",
        "documentation": {}
    },
    {
        "label": "Sum",
        "importPath": "django.db.models",
        "description": "django.db.models",
        "isExtraImport": true,
        "detail": "django.db.models",
        "documentation": {}
    },
    {
        "label": "UserSerializer",
        "importPath": "djoser.serializers",
        "description": "djoser.serializers",
        "isExtraImport": true,
        "detail": "djoser.serializers",
        "documentation": {}
    },
    {
        "label": "serializers",
        "importPath": "rest_framework",
        "description": "rest_framework",
        "isExtraImport": true,
        "detail": "rest_framework",
        "documentation": {}
    },
    {
        "label": "serializers",
        "importPath": "rest_framework",
        "description": "rest_framework",
        "isExtraImport": true,
        "detail": "rest_framework",
        "documentation": {}
    },
    {
        "label": "status",
        "importPath": "rest_framework",
        "description": "rest_framework",
        "isExtraImport": true,
        "detail": "rest_framework",
        "documentation": {}
    },
    {
        "label": "viewsets",
        "importPath": "rest_framework",
        "description": "rest_framework",
        "isExtraImport": true,
        "detail": "rest_framework",
        "documentation": {}
    },
    {
        "label": "ValidationError",
        "importPath": "rest_framework.exceptions",
        "description": "rest_framework.exceptions",
        "isExtraImport": true,
        "detail": "rest_framework.exceptions",
        "documentation": {}
    },
    {
        "label": "APIException",
        "importPath": "rest_framework.exceptions",
        "description": "rest_framework.exceptions",
        "isExtraImport": true,
        "detail": "rest_framework.exceptions",
        "documentation": {}
    },
    {
        "label": "UniqueValidator",
        "importPath": "rest_framework.validators",
        "description": "rest_framework.validators",
        "isExtraImport": true,
        "detail": "rest_framework.validators",
        "documentation": {}
    },
    {
        "label": "Subscribes",
        "importPath": "users.models",
        "description": "users.models",
        "isExtraImport": true,
        "detail": "users.models",
        "documentation": {}
    },
    {
        "label": "User",
        "importPath": "users.models",
        "description": "users.models",
        "isExtraImport": true,
        "detail": "users.models",
        "documentation": {}
    },
    {
        "label": "Subscribes",
        "importPath": "users.models",
        "description": "users.models",
        "isExtraImport": true,
        "detail": "users.models",
        "documentation": {}
    },
    {
        "label": "User",
        "importPath": "users.models",
        "description": "users.models",
        "isExtraImport": true,
        "detail": "users.models",
        "documentation": {}
    },
    {
        "label": "User",
        "importPath": "users.models",
        "description": "users.models",
        "isExtraImport": true,
        "detail": "users.models",
        "documentation": {}
    },
    {
        "label": "validate_username",
        "importPath": "api.validators",
        "description": "api.validators",
        "isExtraImport": true,
        "detail": "api.validators",
        "documentation": {}
    },
    {
        "label": "TestCase",
        "importPath": "django.test",
        "description": "django.test",
        "isExtraImport": true,
        "detail": "django.test",
        "documentation": {}
    },
    {
        "label": "TestCase",
        "importPath": "django.test",
        "description": "django.test",
        "isExtraImport": true,
        "detail": "django.test",
        "documentation": {}
    },
    {
        "label": "TestCase",
        "importPath": "django.test",
        "description": "django.test",
        "isExtraImport": true,
        "detail": "django.test",
        "documentation": {}
    },
    {
        "label": "include",
        "importPath": "django.urls",
        "description": "django.urls",
        "isExtraImport": true,
        "detail": "django.urls",
        "documentation": {}
    },
    {
        "label": "path",
        "importPath": "django.urls",
        "description": "django.urls",
        "isExtraImport": true,
        "detail": "django.urls",
        "documentation": {}
    },
    {
        "label": "include",
        "importPath": "django.urls",
        "description": "django.urls",
        "isExtraImport": true,
        "detail": "django.urls",
        "documentation": {}
    },
    {
        "label": "path",
        "importPath": "django.urls",
        "description": "django.urls",
        "isExtraImport": true,
        "detail": "django.urls",
        "documentation": {}
    },
    {
        "label": "DefaultRouter",
        "importPath": "rest_framework.routers",
        "description": "rest_framework.routers",
        "isExtraImport": true,
        "detail": "rest_framework.routers",
        "documentation": {}
    },
    {
        "label": "IngredientViewSet",
        "importPath": "api.views",
        "description": "api.views",
        "isExtraImport": true,
        "detail": "api.views",
        "documentation": {}
    },
    {
        "label": "RecipeViewSet",
        "importPath": "api.views",
        "description": "api.views",
        "isExtraImport": true,
        "detail": "api.views",
        "documentation": {}
    },
    {
        "label": "TagViewSet",
        "importPath": "api.views",
        "description": "api.views",
        "isExtraImport": true,
        "detail": "api.views",
        "documentation": {}
    },
    {
        "label": "UsersViewSet",
        "importPath": "api.views",
        "description": "api.views",
        "isExtraImport": true,
        "detail": "api.views",
        "documentation": {}
    },
    {
        "label": "re",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "re",
        "description": "re",
        "detail": "re",
        "documentation": {}
    },
    {
        "label": "HttpResponse",
        "importPath": "django.http",
        "description": "django.http",
        "isExtraImport": true,
        "detail": "django.http",
        "documentation": {}
    },
    {
        "label": "UserViewSet",
        "importPath": "djoser.views",
        "description": "djoser.views",
        "isExtraImport": true,
        "detail": "djoser.views",
        "documentation": {}
    },
    {
        "label": "action",
        "importPath": "rest_framework.decorators",
        "description": "rest_framework.decorators",
        "isExtraImport": true,
        "detail": "rest_framework.decorators",
        "documentation": {}
    },
    {
        "label": "get_object_or_404",
        "importPath": "rest_framework.generics",
        "description": "rest_framework.generics",
        "isExtraImport": true,
        "detail": "rest_framework.generics",
        "documentation": {}
    },
    {
        "label": "Response",
        "importPath": "rest_framework.response",
        "description": "rest_framework.response",
        "isExtraImport": true,
        "detail": "rest_framework.response",
        "documentation": {}
    },
    {
        "label": "IngredientFilter",
        "importPath": "api.filters",
        "description": "api.filters",
        "isExtraImport": true,
        "detail": "api.filters",
        "documentation": {}
    },
    {
        "label": "RecipeFilter",
        "importPath": "api.filters",
        "description": "api.filters",
        "isExtraImport": true,
        "detail": "api.filters",
        "documentation": {}
    },
    {
        "label": "IsAdminOrReadOnly",
        "importPath": "api.permissions",
        "description": "api.permissions",
        "isExtraImport": true,
        "detail": "api.permissions",
        "documentation": {}
    },
    {
        "label": "IsAuthorOrReadOnly",
        "importPath": "api.permissions",
        "description": "api.permissions",
        "isExtraImport": true,
        "detail": "api.permissions",
        "documentation": {}
    },
    {
        "label": "IngredientSerializer",
        "importPath": "api.serializers",
        "description": "api.serializers",
        "isExtraImport": true,
        "detail": "api.serializers",
        "documentation": {}
    },
    {
        "label": "RecipeReadSerializer",
        "importPath": "api.serializers",
        "description": "api.serializers",
        "isExtraImport": true,
        "detail": "api.serializers",
        "documentation": {}
    },
    {
        "label": "RecipeSerializer",
        "importPath": "api.serializers",
        "description": "api.serializers",
        "isExtraImport": true,
        "detail": "api.serializers",
        "documentation": {}
    },
    {
        "label": "RecipeWriteSerializer",
        "importPath": "api.serializers",
        "description": "api.serializers",
        "isExtraImport": true,
        "detail": "api.serializers",
        "documentation": {}
    },
    {
        "label": "SubscribesSerializer",
        "importPath": "api.serializers",
        "description": "api.serializers",
        "isExtraImport": true,
        "detail": "api.serializers",
        "documentation": {}
    },
    {
        "label": "TagSerializer",
        "importPath": "api.serializers",
        "description": "api.serializers",
        "isExtraImport": true,
        "detail": "api.serializers",
        "documentation": {}
    },
    {
        "label": "os",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "os",
        "description": "os",
        "detail": "os",
        "documentation": {}
    },
    {
        "label": "get_asgi_application",
        "importPath": "django.core.asgi",
        "description": "django.core.asgi",
        "isExtraImport": true,
        "detail": "django.core.asgi",
        "documentation": {}
    },
    {
        "label": "timedelta",
        "importPath": "datetime",
        "description": "datetime",
        "isExtraImport": true,
        "detail": "datetime",
        "documentation": {}
    },
    {
        "label": "Path",
        "importPath": "pathlib",
        "description": "pathlib",
        "isExtraImport": true,
        "detail": "pathlib",
        "documentation": {}
    },
    {
        "label": "settings",
        "importPath": "django.conf",
        "description": "django.conf",
        "isExtraImport": true,
        "detail": "django.conf",
        "documentation": {}
    },
    {
        "label": "get_wsgi_application",
        "importPath": "django.core.wsgi",
        "description": "django.core.wsgi",
        "isExtraImport": true,
        "detail": "django.core.wsgi",
        "documentation": {}
    },
    {
        "label": "models",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "models",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "render",
        "importPath": "django.shortcuts",
        "description": "django.shortcuts",
        "isExtraImport": true,
        "detail": "django.shortcuts",
        "documentation": {}
    },
    {
        "label": "render",
        "importPath": "django.shortcuts",
        "description": "django.shortcuts",
        "isExtraImport": true,
        "detail": "django.shortcuts",
        "documentation": {}
    },
    {
        "label": "AbstractUser",
        "importPath": "django.contrib.auth.models",
        "description": "django.contrib.auth.models",
        "isExtraImport": true,
        "detail": "django.contrib.auth.models",
        "documentation": {}
    },
    {
        "label": "sys",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "sys",
        "description": "sys",
        "detail": "sys",
        "documentation": {}
    },
    {
        "label": "warnings",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "warnings",
        "description": "warnings",
        "detail": "warnings",
        "documentation": {}
    },
    {
        "label": "management",
        "importPath": "django.core",
        "description": "django.core",
        "isExtraImport": true,
        "detail": "django.core",
        "documentation": {}
    },
    {
        "label": "ApiConfig",
        "kind": 6,
        "importPath": "backend.api.apps",
        "description": "backend.api.apps",
        "peekOfCode": "class ApiConfig(AppConfig):\n    default_auto_field = \"django.db.models.BigAutoField\"\n    name = \"api\"",
        "detail": "backend.api.apps",
        "documentation": {}
    },
    {
        "label": "IngredientFilter",
        "kind": 6,
        "importPath": "backend.api.filters",
        "description": "backend.api.filters",
        "peekOfCode": "class IngredientFilter(FilterSet):\n    name = filters.CharFilter(lookup_expr=\"startswith\")\n    class Meta:\n        model = Ingredient\n        fields = [\"name\"]\nclass RecipeFilter(FilterSet):\n    tags = filters.ModelMultipleChoiceFilter(\n        field_name=\"tags__slug\",\n        to_field_name=\"slug\",\n        queryset=Tag.objects.all(),",
        "detail": "backend.api.filters",
        "documentation": {}
    },
    {
        "label": "RecipeFilter",
        "kind": 6,
        "importPath": "backend.api.filters",
        "description": "backend.api.filters",
        "peekOfCode": "class RecipeFilter(FilterSet):\n    tags = filters.ModelMultipleChoiceFilter(\n        field_name=\"tags__slug\",\n        to_field_name=\"slug\",\n        queryset=Tag.objects.all(),\n    )\n    is_favorited = filters.BooleanFilter(method=\"filter_is_favorited\")\n    is_in_shopping_cart = filters.BooleanFilter(method=\"filter_is_in_shopping_cart\")\n    class Meta:\n        model = Recipe",
        "detail": "backend.api.filters",
        "documentation": {}
    },
    {
        "label": "User",
        "kind": 5,
        "importPath": "backend.api.filters",
        "description": "backend.api.filters",
        "peekOfCode": "User = get_user_model()\nclass IngredientFilter(FilterSet):\n    name = filters.CharFilter(lookup_expr=\"startswith\")\n    class Meta:\n        model = Ingredient\n        fields = [\"name\"]\nclass RecipeFilter(FilterSet):\n    tags = filters.ModelMultipleChoiceFilter(\n        field_name=\"tags__slug\",\n        to_field_name=\"slug\",",
        "detail": "backend.api.filters",
        "documentation": {}
    },
    {
        "label": "IsAdminOrReadOnly",
        "kind": 6,
        "importPath": "backend.api.permissions",
        "description": "backend.api.permissions",
        "peekOfCode": "class IsAdminOrReadOnly(BasePermission):\n    def has_permission(self, request, view):\n        return request.method in SAFE_METHODS or request.user.is_staff\nclass IsAuthorOrReadOnly(BasePermission):\n    def has_permission(self, request, view):\n        return request.method in SAFE_METHODS or request.user.is_authenticated\n    def has_object_permission(self, request, view, obj):\n        return obj.author == request.user",
        "detail": "backend.api.permissions",
        "documentation": {}
    },
    {
        "label": "IsAuthorOrReadOnly",
        "kind": 6,
        "importPath": "backend.api.permissions",
        "description": "backend.api.permissions",
        "peekOfCode": "class IsAuthorOrReadOnly(BasePermission):\n    def has_permission(self, request, view):\n        return request.method in SAFE_METHODS or request.user.is_authenticated\n    def has_object_permission(self, request, view, obj):\n        return obj.author == request.user",
        "detail": "backend.api.permissions",
        "documentation": {}
    },
    {
        "label": "Base64ImageField",
        "kind": 6,
        "importPath": "backend.api.serializers",
        "description": "backend.api.serializers",
        "peekOfCode": "class Base64ImageField(serializers.ImageField):\n    \"\"\"Сериализация картинки\"\"\"\n    def to_internal_value(self, data):\n        if isinstance(data, str) and data.startswith(\"data:image\"):\n            format, imgstr = data.split(\";base64,\")\n            ext = format.split(\"/\")[-1]\n            data = ContentFile(base64.b64decode(imgstr), name=\"temp.\" + ext)\n        return super().to_internal_value(data)\nclass UsersSerializer(UserSerializer):\n    \"\"\"Сериализация пользователей\"\"\"",
        "detail": "backend.api.serializers",
        "documentation": {}
    },
    {
        "label": "UsersSerializer",
        "kind": 6,
        "importPath": "backend.api.serializers",
        "description": "backend.api.serializers",
        "peekOfCode": "class UsersSerializer(UserSerializer):\n    \"\"\"Сериализация пользователей\"\"\"\n    is_subscribed = serializers.SerializerMethodField()\n    class Meta:\n        model = User\n        fields = [\"email\", \"id\", \"username\", \"first_name\", \"last_name\", \"is_subscribed\"]\n    def get_is_subscribed(self, obj):\n        \"\"\"Проверка подписки\"\"\"\n        user = self.context.get(\"request\").user\n        if user.is_anonymous:",
        "detail": "backend.api.serializers",
        "documentation": {}
    },
    {
        "label": "UsersCreateSerializer",
        "kind": 6,
        "importPath": "backend.api.serializers",
        "description": "backend.api.serializers",
        "peekOfCode": "class UsersCreateSerializer(UserSerializer):\n    \"\"\"Сериализация создания пользователей\"\"\"\n    username = serializers.CharField(\n        max_length=150,\n        required=True,\n        validators=[UniqueValidator(queryset=User.objects.all()), validate_username],\n    )\n    email = serializers.EmailField(\n        max_length=254,\n        required=True,",
        "detail": "backend.api.serializers",
        "documentation": {}
    },
    {
        "label": "TagSerializer",
        "kind": 6,
        "importPath": "backend.api.serializers",
        "description": "backend.api.serializers",
        "peekOfCode": "class TagSerializer(serializers.ModelSerializer):\n    \"\"\"Сериализация тэгов\"\"\"\n    class Meta:\n        model = Tag\n        fields = \"__all__\"\nclass IngredientSerializer(serializers.ModelSerializer):\n    \"\"\"Сериализация ингредиентов\"\"\"\n    class Meta:\n        model = Ingredient\n        fields = \"__all__\"",
        "detail": "backend.api.serializers",
        "documentation": {}
    },
    {
        "label": "IngredientSerializer",
        "kind": 6,
        "importPath": "backend.api.serializers",
        "description": "backend.api.serializers",
        "peekOfCode": "class IngredientSerializer(serializers.ModelSerializer):\n    \"\"\"Сериализация ингредиентов\"\"\"\n    class Meta:\n        model = Ingredient\n        fields = \"__all__\"\nclass IngredientInRecipeSerializer(serializers.ModelSerializer):\n    \"\"\"Сериализация ингредиентов в рецепте\"\"\"\n    id = serializers.IntegerField(write_only=True)\n    amount = serializers.IntegerField(write_only=True)\n    class Meta:",
        "detail": "backend.api.serializers",
        "documentation": {}
    },
    {
        "label": "IngredientInRecipeSerializer",
        "kind": 6,
        "importPath": "backend.api.serializers",
        "description": "backend.api.serializers",
        "peekOfCode": "class IngredientInRecipeSerializer(serializers.ModelSerializer):\n    \"\"\"Сериализация ингредиентов в рецепте\"\"\"\n    id = serializers.IntegerField(write_only=True)\n    amount = serializers.IntegerField(write_only=True)\n    class Meta:\n        model = IngredientInRecipe\n        fields = (\"id\", \"amount\")\nclass RecipeSerializer(serializers.ModelSerializer):\n    \"\"\"Сериализация рецепта\"\"\"\n    image = Base64ImageField(required=True)",
        "detail": "backend.api.serializers",
        "documentation": {}
    },
    {
        "label": "RecipeSerializer",
        "kind": 6,
        "importPath": "backend.api.serializers",
        "description": "backend.api.serializers",
        "peekOfCode": "class RecipeSerializer(serializers.ModelSerializer):\n    \"\"\"Сериализация рецепта\"\"\"\n    image = Base64ImageField(required=True)\n    class Meta:\n        model = Recipe\n        fields = [\"id\", \"name\", \"image\", \"cooking_time\"]\n        read_only_fields = (\"__all__\",)\nclass RecipeReadSerializer(serializers.ModelSerializer):\n    \"\"\"Сериализация имеющегося рецепта\"\"\"\n    image = Base64ImageField(required=True)",
        "detail": "backend.api.serializers",
        "documentation": {}
    },
    {
        "label": "RecipeReadSerializer",
        "kind": 6,
        "importPath": "backend.api.serializers",
        "description": "backend.api.serializers",
        "peekOfCode": "class RecipeReadSerializer(serializers.ModelSerializer):\n    \"\"\"Сериализация имеющегося рецепта\"\"\"\n    image = Base64ImageField(required=True)\n    author = UsersSerializer()\n    tags = TagSerializer(many=True)\n    ingredients = serializers.SerializerMethodField()\n    is_favorited = serializers.SerializerMethodField(read_only=True)\n    is_in_shopping_cart = serializers.SerializerMethodField(read_only=True)\n    class Meta:\n        model = Recipe",
        "detail": "backend.api.serializers",
        "documentation": {}
    },
    {
        "label": "RecipeWriteSerializer",
        "kind": 6,
        "importPath": "backend.api.serializers",
        "description": "backend.api.serializers",
        "peekOfCode": "class RecipeWriteSerializer(serializers.ModelSerializer):\n    \"\"\"Сериализация создания рецепта\"\"\"\n    author = serializers.CharField(default=serializers.CurrentUserDefault())\n    image = Base64ImageField(required=True)\n    tags = serializers.PrimaryKeyRelatedField(many=True, queryset=Tag.objects.all())\n    ingredients = IngredientInRecipeSerializer(many=True)\n    class Meta:\n        model = Recipe\n        fields = [\n            \"id\",",
        "detail": "backend.api.serializers",
        "documentation": {}
    },
    {
        "label": "SubscribesSerializer",
        "kind": 6,
        "importPath": "backend.api.serializers",
        "description": "backend.api.serializers",
        "peekOfCode": "class SubscribesSerializer(UsersSerializer):\n    \"\"\"Сериализация подписок\"\"\"\n    is_subscribed = serializers.SerializerMethodField()\n    recipes = serializers.SerializerMethodField()\n    recipes_count = serializers.SerializerMethodField()\n    email = serializers.EmailField(default=serializers.CurrentUserDefault())\n    username = serializers.SlugField(default=serializers.CurrentUserDefault())\n    first_name = serializers.SlugField(default=serializers.CurrentUserDefault())\n    last_name = serializers.SlugField(default=serializers.CurrentUserDefault())\n    class Meta:",
        "detail": "backend.api.serializers",
        "documentation": {}
    },
    {
        "label": "router",
        "kind": 5,
        "importPath": "backend.api.urls",
        "description": "backend.api.urls",
        "peekOfCode": "router = DefaultRouter()\nrouter.register(\"tags\", TagViewSet, basename=\"tags\")\nrouter.register(\"recipes\", RecipeViewSet, basename=\"recipes\")\nrouter.register(\"ingredients\", IngredientViewSet, basename=\"ingredients\")\nrouter.register(\"users\", UsersViewSet, basename=\"subscriptions\")\nurlpatterns = [\n    path(\"\", include(router.urls)),\n    path(\"auth/\", include(\"djoser.urls.authtoken\")),\n]",
        "detail": "backend.api.urls",
        "documentation": {}
    },
    {
        "label": "urlpatterns",
        "kind": 5,
        "importPath": "backend.api.urls",
        "description": "backend.api.urls",
        "peekOfCode": "urlpatterns = [\n    path(\"\", include(router.urls)),\n    path(\"auth/\", include(\"djoser.urls.authtoken\")),\n]",
        "detail": "backend.api.urls",
        "documentation": {}
    },
    {
        "label": "validate_username",
        "kind": 2,
        "importPath": "backend.api.validators",
        "description": "backend.api.validators",
        "peekOfCode": "def validate_username(value: str) -> str:\n    \"\"\"Валидация поля username согласно шаблону.\"\"\"\n    match = re.fullmatch(USERNAME_PATTERN_REGEX, value)\n    if not match:\n        raise serializers.ValidationError(\n            \"Имя пользователя некорректно.\",\n        )\n    return value",
        "detail": "backend.api.validators",
        "documentation": {}
    },
    {
        "label": "USERNAME_PATTERN_REGEX",
        "kind": 5,
        "importPath": "backend.api.validators",
        "description": "backend.api.validators",
        "peekOfCode": "USERNAME_PATTERN_REGEX = r\"^[\\w.@+-]+\\Z\"\ndef validate_username(value: str) -> str:\n    \"\"\"Валидация поля username согласно шаблону.\"\"\"\n    match = re.fullmatch(USERNAME_PATTERN_REGEX, value)\n    if not match:\n        raise serializers.ValidationError(\n            \"Имя пользователя некорректно.\",\n        )\n    return value",
        "detail": "backend.api.validators",
        "documentation": {}
    },
    {
        "label": "SelfSubscribeError",
        "kind": 6,
        "importPath": "backend.api.views",
        "description": "backend.api.views",
        "peekOfCode": "class SelfSubscribeError(APIException):\n    \"\"\"Ошибка подписки на самого себя.\"\"\"\n    status_code = 400\n    default_detail = \"Нельзя подписаться на самого себя.\"\n    default_code = \"bad request\"\nclass RecipeViewSet(viewsets.ModelViewSet):\n    \"\"\"Представление рецепта\"\"\"\n    queryset = Recipe.objects.all()\n    permission_classes = (IsAuthorOrReadOnly | IsAdminOrReadOnly,)\n    filter_backends = (DjangoFilterBackend,)",
        "detail": "backend.api.views",
        "documentation": {}
    },
    {
        "label": "RecipeViewSet",
        "kind": 6,
        "importPath": "backend.api.views",
        "description": "backend.api.views",
        "peekOfCode": "class RecipeViewSet(viewsets.ModelViewSet):\n    \"\"\"Представление рецепта\"\"\"\n    queryset = Recipe.objects.all()\n    permission_classes = (IsAuthorOrReadOnly | IsAdminOrReadOnly,)\n    filter_backends = (DjangoFilterBackend,)\n    filterset_class = RecipeFilter\n    def get_serializer_class(self):\n        if self.request.method in SAFE_METHODS:\n            return RecipeReadSerializer\n        return RecipeWriteSerializer",
        "detail": "backend.api.views",
        "documentation": {}
    },
    {
        "label": "TagViewSet",
        "kind": 6,
        "importPath": "backend.api.views",
        "description": "backend.api.views",
        "peekOfCode": "class TagViewSet(viewsets.ModelViewSet):\n    \"\"\"Представление тэгов\"\"\"\n    queryset = Tag.objects.all()\n    serializer_class = TagSerializer\n    permission_classes = (IsAdminOrReadOnly,)\nclass IngredientViewSet(viewsets.ModelViewSet):\n    \"\"\"Представление ингредиентов\"\"\"\n    queryset = Ingredient.objects.all()\n    serializer_class = IngredientSerializer\n    permission_classes = (IsAdminOrReadOnly,)",
        "detail": "backend.api.views",
        "documentation": {}
    },
    {
        "label": "IngredientViewSet",
        "kind": 6,
        "importPath": "backend.api.views",
        "description": "backend.api.views",
        "peekOfCode": "class IngredientViewSet(viewsets.ModelViewSet):\n    \"\"\"Представление ингредиентов\"\"\"\n    queryset = Ingredient.objects.all()\n    serializer_class = IngredientSerializer\n    permission_classes = (IsAdminOrReadOnly,)\n    filter_backends = (DjangoFilterBackend,)\n    filterset_class = IngredientFilter\nclass UsersViewSet(DjoserUserViewSet):\n    \"\"\"Представление пользователей и подписок\"\"\"\n    queryset = User.objects.all()",
        "detail": "backend.api.views",
        "documentation": {}
    },
    {
        "label": "UsersViewSet",
        "kind": 6,
        "importPath": "backend.api.views",
        "description": "backend.api.views",
        "peekOfCode": "class UsersViewSet(DjoserUserViewSet):\n    \"\"\"Представление пользователей и подписок\"\"\"\n    queryset = User.objects.all()\n    serializer_class = SubscribesSerializer\n    permission_classes = (IsAuthenticated,)\n    @action(\n        detail=False,\n        methods=[\"Get\"],\n        permission_classes=[AllowAny],\n        name=\"Subscriptions\",",
        "detail": "backend.api.views",
        "documentation": {}
    },
    {
        "label": "application",
        "kind": 5,
        "importPath": "backend.foodgram_backend.asgi",
        "description": "backend.foodgram_backend.asgi",
        "peekOfCode": "application = get_asgi_application()",
        "detail": "backend.foodgram_backend.asgi",
        "documentation": {}
    },
    {
        "label": "show_toolbar",
        "kind": 2,
        "importPath": "backend.foodgram_backend.settings",
        "description": "backend.foodgram_backend.settings",
        "peekOfCode": "def show_toolbar(request):\n    return True\nDEBUG_TOOLBAR_CONFIG = {\n    \"SHOW_TOOLBAR_CALLBACK\": show_toolbar,\n}",
        "detail": "backend.foodgram_backend.settings",
        "documentation": {}
    },
    {
        "label": "BASE_DIR",
        "kind": 5,
        "importPath": "backend.foodgram_backend.settings",
        "description": "backend.foodgram_backend.settings",
        "peekOfCode": "BASE_DIR = Path(__file__).resolve().parent.parent\nSECRET_KEY = \"django-insecure-04dakutiig6wulbmmodkx_oh(+)jkh&rc06hprp@g%$$^=yi3(\"\nDEBUG = True\nALLOWED_HOSTS = [\"localhost\", \"127.0.0.1\"]\nINSTALLED_APPS = [\n    \"django.contrib.admin\",\n    \"django.contrib.auth\",\n    \"django.contrib.contenttypes\",\n    \"django.contrib.sessions\",\n    \"django.contrib.messages\",",
        "detail": "backend.foodgram_backend.settings",
        "documentation": {}
    },
    {
        "label": "SECRET_KEY",
        "kind": 5,
        "importPath": "backend.foodgram_backend.settings",
        "description": "backend.foodgram_backend.settings",
        "peekOfCode": "SECRET_KEY = \"django-insecure-04dakutiig6wulbmmodkx_oh(+)jkh&rc06hprp@g%$$^=yi3(\"\nDEBUG = True\nALLOWED_HOSTS = [\"localhost\", \"127.0.0.1\"]\nINSTALLED_APPS = [\n    \"django.contrib.admin\",\n    \"django.contrib.auth\",\n    \"django.contrib.contenttypes\",\n    \"django.contrib.sessions\",\n    \"django.contrib.messages\",\n    \"django.contrib.staticfiles\",",
        "detail": "backend.foodgram_backend.settings",
        "documentation": {}
    },
    {
        "label": "DEBUG",
        "kind": 5,
        "importPath": "backend.foodgram_backend.settings",
        "description": "backend.foodgram_backend.settings",
        "peekOfCode": "DEBUG = True\nALLOWED_HOSTS = [\"localhost\", \"127.0.0.1\"]\nINSTALLED_APPS = [\n    \"django.contrib.admin\",\n    \"django.contrib.auth\",\n    \"django.contrib.contenttypes\",\n    \"django.contrib.sessions\",\n    \"django.contrib.messages\",\n    \"django.contrib.staticfiles\",\n    \"rest_framework\",",
        "detail": "backend.foodgram_backend.settings",
        "documentation": {}
    },
    {
        "label": "ALLOWED_HOSTS",
        "kind": 5,
        "importPath": "backend.foodgram_backend.settings",
        "description": "backend.foodgram_backend.settings",
        "peekOfCode": "ALLOWED_HOSTS = [\"localhost\", \"127.0.0.1\"]\nINSTALLED_APPS = [\n    \"django.contrib.admin\",\n    \"django.contrib.auth\",\n    \"django.contrib.contenttypes\",\n    \"django.contrib.sessions\",\n    \"django.contrib.messages\",\n    \"django.contrib.staticfiles\",\n    \"rest_framework\",\n    \"rest_framework.authtoken\",",
        "detail": "backend.foodgram_backend.settings",
        "documentation": {}
    },
    {
        "label": "INSTALLED_APPS",
        "kind": 5,
        "importPath": "backend.foodgram_backend.settings",
        "description": "backend.foodgram_backend.settings",
        "peekOfCode": "INSTALLED_APPS = [\n    \"django.contrib.admin\",\n    \"django.contrib.auth\",\n    \"django.contrib.contenttypes\",\n    \"django.contrib.sessions\",\n    \"django.contrib.messages\",\n    \"django.contrib.staticfiles\",\n    \"rest_framework\",\n    \"rest_framework.authtoken\",\n    \"djoser\",",
        "detail": "backend.foodgram_backend.settings",
        "documentation": {}
    },
    {
        "label": "MIDDLEWARE",
        "kind": 5,
        "importPath": "backend.foodgram_backend.settings",
        "description": "backend.foodgram_backend.settings",
        "peekOfCode": "MIDDLEWARE = [\n    \"django.middleware.security.SecurityMiddleware\",\n    \"django.contrib.sessions.middleware.SessionMiddleware\",\n    \"django.middleware.common.CommonMiddleware\",\n    \"django.middleware.csrf.CsrfViewMiddleware\",\n    \"django.contrib.auth.middleware.AuthenticationMiddleware\",\n    \"django.contrib.messages.middleware.MessageMiddleware\",\n    \"django.middleware.clickjacking.XFrameOptionsMiddleware\",\n    \"debug_toolbar.middleware.DebugToolbarMiddleware\",\n]",
        "detail": "backend.foodgram_backend.settings",
        "documentation": {}
    },
    {
        "label": "ROOT_URLCONF",
        "kind": 5,
        "importPath": "backend.foodgram_backend.settings",
        "description": "backend.foodgram_backend.settings",
        "peekOfCode": "ROOT_URLCONF = \"foodgram_backend.urls\"\nTEMPLATES = [\n    {\n        \"BACKEND\": \"django.template.backends.django.DjangoTemplates\",\n        \"DIRS\": [],\n        \"APP_DIRS\": True,\n        \"OPTIONS\": {\n            \"context_processors\": [\n                \"django.template.context_processors.debug\",\n                \"django.template.context_processors.request\",",
        "detail": "backend.foodgram_backend.settings",
        "documentation": {}
    },
    {
        "label": "TEMPLATES",
        "kind": 5,
        "importPath": "backend.foodgram_backend.settings",
        "description": "backend.foodgram_backend.settings",
        "peekOfCode": "TEMPLATES = [\n    {\n        \"BACKEND\": \"django.template.backends.django.DjangoTemplates\",\n        \"DIRS\": [],\n        \"APP_DIRS\": True,\n        \"OPTIONS\": {\n            \"context_processors\": [\n                \"django.template.context_processors.debug\",\n                \"django.template.context_processors.request\",\n                \"django.contrib.auth.context_processors.auth\",",
        "detail": "backend.foodgram_backend.settings",
        "documentation": {}
    },
    {
        "label": "WSGI_APPLICATION",
        "kind": 5,
        "importPath": "backend.foodgram_backend.settings",
        "description": "backend.foodgram_backend.settings",
        "peekOfCode": "WSGI_APPLICATION = \"foodgram_backend.wsgi.application\"\nDATABASES = {\n    \"default\": {\n        \"ENGINE\": \"django.db.backends.postgresql\",\n        \"NAME\": os.getenv(\"POSTGRES_DB\", \"django\"),\n        \"USER\": os.getenv(\"POSTGRES_USER\", \"django\"),\n        \"PASSWORD\": os.getenv(\"POSTGRES_PASSWORD\", \"django\"),\n        \"HOST\": os.getenv(\"DB_HOST\", \"localhost\"),\n        \"PORT\": os.getenv(\"DB_PORT\", 5432),\n    }",
        "detail": "backend.foodgram_backend.settings",
        "documentation": {}
    },
    {
        "label": "DATABASES",
        "kind": 5,
        "importPath": "backend.foodgram_backend.settings",
        "description": "backend.foodgram_backend.settings",
        "peekOfCode": "DATABASES = {\n    \"default\": {\n        \"ENGINE\": \"django.db.backends.postgresql\",\n        \"NAME\": os.getenv(\"POSTGRES_DB\", \"django\"),\n        \"USER\": os.getenv(\"POSTGRES_USER\", \"django\"),\n        \"PASSWORD\": os.getenv(\"POSTGRES_PASSWORD\", \"django\"),\n        \"HOST\": os.getenv(\"DB_HOST\", \"localhost\"),\n        \"PORT\": os.getenv(\"DB_PORT\", 5432),\n    }\n}",
        "detail": "backend.foodgram_backend.settings",
        "documentation": {}
    },
    {
        "label": "PASSWORD_HASHERS",
        "kind": 5,
        "importPath": "backend.foodgram_backend.settings",
        "description": "backend.foodgram_backend.settings",
        "peekOfCode": "PASSWORD_HASHERS = [\n    \"django.contrib.auth.hashers.PBKDF2PasswordHasher\",\n    \"django.contrib.auth.hashers.PBKDF2SHA1PasswordHasher\",\n]\nAUTH_PASSWORD_VALIDATORS = [\n    {\n        \"NAME\": \"django.contrib.auth.password_validation.UserAttributeSimilarityValidator\",\n    },\n    {\n        \"NAME\": \"django.contrib.auth.password_validation.MinimumLengthValidator\",",
        "detail": "backend.foodgram_backend.settings",
        "documentation": {}
    },
    {
        "label": "AUTH_PASSWORD_VALIDATORS",
        "kind": 5,
        "importPath": "backend.foodgram_backend.settings",
        "description": "backend.foodgram_backend.settings",
        "peekOfCode": "AUTH_PASSWORD_VALIDATORS = [\n    {\n        \"NAME\": \"django.contrib.auth.password_validation.UserAttributeSimilarityValidator\",\n    },\n    {\n        \"NAME\": \"django.contrib.auth.password_validation.MinimumLengthValidator\",\n    },\n    {\n        \"NAME\": \"django.contrib.auth.password_validation.CommonPasswordValidator\",\n    },",
        "detail": "backend.foodgram_backend.settings",
        "documentation": {}
    },
    {
        "label": "LANGUAGE_CODE",
        "kind": 5,
        "importPath": "backend.foodgram_backend.settings",
        "description": "backend.foodgram_backend.settings",
        "peekOfCode": "LANGUAGE_CODE = \"en-us\"\nTIME_ZONE = \"UTC\"\nUSE_I18N = True\nUSE_L10N = True\nUSE_TZ = True\nSTATIC_URL = \"/static/\"\nSTATIC_ROOT = BASE_DIR / \"collected_static\"\nMEDIA_URL = \"/media/\"\nMEDIA_ROOT = BASE_DIR / \"media\"\nDEFAULT_AUTO_FIELD = \"django.db.models.BigAutoField\"",
        "detail": "backend.foodgram_backend.settings",
        "documentation": {}
    },
    {
        "label": "TIME_ZONE",
        "kind": 5,
        "importPath": "backend.foodgram_backend.settings",
        "description": "backend.foodgram_backend.settings",
        "peekOfCode": "TIME_ZONE = \"UTC\"\nUSE_I18N = True\nUSE_L10N = True\nUSE_TZ = True\nSTATIC_URL = \"/static/\"\nSTATIC_ROOT = BASE_DIR / \"collected_static\"\nMEDIA_URL = \"/media/\"\nMEDIA_ROOT = BASE_DIR / \"media\"\nDEFAULT_AUTO_FIELD = \"django.db.models.BigAutoField\"\nAUTH_USER_MODEL = \"users.User\"",
        "detail": "backend.foodgram_backend.settings",
        "documentation": {}
    },
    {
        "label": "USE_I18N",
        "kind": 5,
        "importPath": "backend.foodgram_backend.settings",
        "description": "backend.foodgram_backend.settings",
        "peekOfCode": "USE_I18N = True\nUSE_L10N = True\nUSE_TZ = True\nSTATIC_URL = \"/static/\"\nSTATIC_ROOT = BASE_DIR / \"collected_static\"\nMEDIA_URL = \"/media/\"\nMEDIA_ROOT = BASE_DIR / \"media\"\nDEFAULT_AUTO_FIELD = \"django.db.models.BigAutoField\"\nAUTH_USER_MODEL = \"users.User\"\nREST_FRAMEWORK = {",
        "detail": "backend.foodgram_backend.settings",
        "documentation": {}
    },
    {
        "label": "USE_L10N",
        "kind": 5,
        "importPath": "backend.foodgram_backend.settings",
        "description": "backend.foodgram_backend.settings",
        "peekOfCode": "USE_L10N = True\nUSE_TZ = True\nSTATIC_URL = \"/static/\"\nSTATIC_ROOT = BASE_DIR / \"collected_static\"\nMEDIA_URL = \"/media/\"\nMEDIA_ROOT = BASE_DIR / \"media\"\nDEFAULT_AUTO_FIELD = \"django.db.models.BigAutoField\"\nAUTH_USER_MODEL = \"users.User\"\nREST_FRAMEWORK = {\n    \"DEFAULT_PERMISSION_CLASSES\": [",
        "detail": "backend.foodgram_backend.settings",
        "documentation": {}
    },
    {
        "label": "USE_TZ",
        "kind": 5,
        "importPath": "backend.foodgram_backend.settings",
        "description": "backend.foodgram_backend.settings",
        "peekOfCode": "USE_TZ = True\nSTATIC_URL = \"/static/\"\nSTATIC_ROOT = BASE_DIR / \"collected_static\"\nMEDIA_URL = \"/media/\"\nMEDIA_ROOT = BASE_DIR / \"media\"\nDEFAULT_AUTO_FIELD = \"django.db.models.BigAutoField\"\nAUTH_USER_MODEL = \"users.User\"\nREST_FRAMEWORK = {\n    \"DEFAULT_PERMISSION_CLASSES\": [\n        \"rest_framework.permissions.IsAuthenticated\",",
        "detail": "backend.foodgram_backend.settings",
        "documentation": {}
    },
    {
        "label": "STATIC_URL",
        "kind": 5,
        "importPath": "backend.foodgram_backend.settings",
        "description": "backend.foodgram_backend.settings",
        "peekOfCode": "STATIC_URL = \"/static/\"\nSTATIC_ROOT = BASE_DIR / \"collected_static\"\nMEDIA_URL = \"/media/\"\nMEDIA_ROOT = BASE_DIR / \"media\"\nDEFAULT_AUTO_FIELD = \"django.db.models.BigAutoField\"\nAUTH_USER_MODEL = \"users.User\"\nREST_FRAMEWORK = {\n    \"DEFAULT_PERMISSION_CLASSES\": [\n        \"rest_framework.permissions.IsAuthenticated\",\n    ],",
        "detail": "backend.foodgram_backend.settings",
        "documentation": {}
    },
    {
        "label": "STATIC_ROOT",
        "kind": 5,
        "importPath": "backend.foodgram_backend.settings",
        "description": "backend.foodgram_backend.settings",
        "peekOfCode": "STATIC_ROOT = BASE_DIR / \"collected_static\"\nMEDIA_URL = \"/media/\"\nMEDIA_ROOT = BASE_DIR / \"media\"\nDEFAULT_AUTO_FIELD = \"django.db.models.BigAutoField\"\nAUTH_USER_MODEL = \"users.User\"\nREST_FRAMEWORK = {\n    \"DEFAULT_PERMISSION_CLASSES\": [\n        \"rest_framework.permissions.IsAuthenticated\",\n    ],\n    \"DEFAULT_AUTHENTICATION_CLASSES\": [",
        "detail": "backend.foodgram_backend.settings",
        "documentation": {}
    },
    {
        "label": "MEDIA_URL",
        "kind": 5,
        "importPath": "backend.foodgram_backend.settings",
        "description": "backend.foodgram_backend.settings",
        "peekOfCode": "MEDIA_URL = \"/media/\"\nMEDIA_ROOT = BASE_DIR / \"media\"\nDEFAULT_AUTO_FIELD = \"django.db.models.BigAutoField\"\nAUTH_USER_MODEL = \"users.User\"\nREST_FRAMEWORK = {\n    \"DEFAULT_PERMISSION_CLASSES\": [\n        \"rest_framework.permissions.IsAuthenticated\",\n    ],\n    \"DEFAULT_AUTHENTICATION_CLASSES\": [\n        \"rest_framework.authentication.TokenAuthentication\",",
        "detail": "backend.foodgram_backend.settings",
        "documentation": {}
    },
    {
        "label": "MEDIA_ROOT",
        "kind": 5,
        "importPath": "backend.foodgram_backend.settings",
        "description": "backend.foodgram_backend.settings",
        "peekOfCode": "MEDIA_ROOT = BASE_DIR / \"media\"\nDEFAULT_AUTO_FIELD = \"django.db.models.BigAutoField\"\nAUTH_USER_MODEL = \"users.User\"\nREST_FRAMEWORK = {\n    \"DEFAULT_PERMISSION_CLASSES\": [\n        \"rest_framework.permissions.IsAuthenticated\",\n    ],\n    \"DEFAULT_AUTHENTICATION_CLASSES\": [\n        \"rest_framework.authentication.TokenAuthentication\",\n    ],",
        "detail": "backend.foodgram_backend.settings",
        "documentation": {}
    },
    {
        "label": "DEFAULT_AUTO_FIELD",
        "kind": 5,
        "importPath": "backend.foodgram_backend.settings",
        "description": "backend.foodgram_backend.settings",
        "peekOfCode": "DEFAULT_AUTO_FIELD = \"django.db.models.BigAutoField\"\nAUTH_USER_MODEL = \"users.User\"\nREST_FRAMEWORK = {\n    \"DEFAULT_PERMISSION_CLASSES\": [\n        \"rest_framework.permissions.IsAuthenticated\",\n    ],\n    \"DEFAULT_AUTHENTICATION_CLASSES\": [\n        \"rest_framework.authentication.TokenAuthentication\",\n    ],\n    \"DEFAULT_FILTER_BACKENDS\": [\"django_filters.rest_framework.DjangoFilterBackend\"],",
        "detail": "backend.foodgram_backend.settings",
        "documentation": {}
    },
    {
        "label": "AUTH_USER_MODEL",
        "kind": 5,
        "importPath": "backend.foodgram_backend.settings",
        "description": "backend.foodgram_backend.settings",
        "peekOfCode": "AUTH_USER_MODEL = \"users.User\"\nREST_FRAMEWORK = {\n    \"DEFAULT_PERMISSION_CLASSES\": [\n        \"rest_framework.permissions.IsAuthenticated\",\n    ],\n    \"DEFAULT_AUTHENTICATION_CLASSES\": [\n        \"rest_framework.authentication.TokenAuthentication\",\n    ],\n    \"DEFAULT_FILTER_BACKENDS\": [\"django_filters.rest_framework.DjangoFilterBackend\"],\n    \"DEFAULT_PAGINATION_CLASS\": \"rest_framework.pagination.PageNumberPagination\",",
        "detail": "backend.foodgram_backend.settings",
        "documentation": {}
    },
    {
        "label": "REST_FRAMEWORK",
        "kind": 5,
        "importPath": "backend.foodgram_backend.settings",
        "description": "backend.foodgram_backend.settings",
        "peekOfCode": "REST_FRAMEWORK = {\n    \"DEFAULT_PERMISSION_CLASSES\": [\n        \"rest_framework.permissions.IsAuthenticated\",\n    ],\n    \"DEFAULT_AUTHENTICATION_CLASSES\": [\n        \"rest_framework.authentication.TokenAuthentication\",\n    ],\n    \"DEFAULT_FILTER_BACKENDS\": [\"django_filters.rest_framework.DjangoFilterBackend\"],\n    \"DEFAULT_PAGINATION_CLASS\": \"rest_framework.pagination.PageNumberPagination\",\n    \"PAGE_SIZE\": 6,",
        "detail": "backend.foodgram_backend.settings",
        "documentation": {}
    },
    {
        "label": "DJOSER",
        "kind": 5,
        "importPath": "backend.foodgram_backend.settings",
        "description": "backend.foodgram_backend.settings",
        "peekOfCode": "DJOSER = {\n    \"LOGIN_FIELD\": \"email\",\n    \"SERIALIZERS\": {\n        \"user\": \"api.serializers.UsersSerializer\",\n        \"current_user\": \"api.serializers.UsersSerializer\",\n        \"user_create\": \"api.serializers.UsersCreateSerializer\",\n    },\n    \"PERMISSIONS\": {\n        \"user_list\": [\"rest_framework.permissions.AllowAny\"],\n    },",
        "detail": "backend.foodgram_backend.settings",
        "documentation": {}
    },
    {
        "label": "INTERNAL_IPS",
        "kind": 5,
        "importPath": "backend.foodgram_backend.settings",
        "description": "backend.foodgram_backend.settings",
        "peekOfCode": "INTERNAL_IPS = [\n    \"127.0.0.1\",\n]\ndef show_toolbar(request):\n    return True\nDEBUG_TOOLBAR_CONFIG = {\n    \"SHOW_TOOLBAR_CALLBACK\": show_toolbar,\n}",
        "detail": "backend.foodgram_backend.settings",
        "documentation": {}
    },
    {
        "label": "DEBUG_TOOLBAR_CONFIG",
        "kind": 5,
        "importPath": "backend.foodgram_backend.settings",
        "description": "backend.foodgram_backend.settings",
        "peekOfCode": "DEBUG_TOOLBAR_CONFIG = {\n    \"SHOW_TOOLBAR_CALLBACK\": show_toolbar,\n}",
        "detail": "backend.foodgram_backend.settings",
        "documentation": {}
    },
    {
        "label": "urlpatterns",
        "kind": 5,
        "importPath": "backend.foodgram_backend.urls",
        "description": "backend.foodgram_backend.urls",
        "peekOfCode": "urlpatterns = [\n    path(\"admin/\", admin.site.urls),\n    path(\"api/\", include(\"api.urls\")),\n]\nif settings.DEBUG:\n    import debug_toolbar\n    urlpatterns += (path(\"__debug__/\", include(debug_toolbar.urls)),)",
        "detail": "backend.foodgram_backend.urls",
        "documentation": {}
    },
    {
        "label": "application",
        "kind": 5,
        "importPath": "backend.foodgram_backend.wsgi",
        "description": "backend.foodgram_backend.wsgi",
        "peekOfCode": "application = get_wsgi_application()",
        "detail": "backend.foodgram_backend.wsgi",
        "documentation": {}
    },
    {
        "label": "RecipeAdmin",
        "kind": 6,
        "importPath": "backend.recipes.admin",
        "description": "backend.recipes.admin",
        "peekOfCode": "class RecipeAdmin(admin.ModelAdmin):\n    list_display = (\n        \"pk\",\n        \"author\",\n        \"name\",\n        \"image\",\n        \"text\",\n        \"cooking_time\",\n    )\n    list_filter = (",
        "detail": "backend.recipes.admin",
        "documentation": {}
    },
    {
        "label": "IngredientAdmin",
        "kind": 6,
        "importPath": "backend.recipes.admin",
        "description": "backend.recipes.admin",
        "peekOfCode": "class IngredientAdmin(admin.ModelAdmin):\n    list_display = (\n        \"name\",\n        \"measurement_unit\",\n    )\n    list_filter = (\"name\",)\n@admin.register(Tag)\nclass TagAdmin(admin.ModelAdmin):\n    list_display = (\n        \"name\",",
        "detail": "backend.recipes.admin",
        "documentation": {}
    },
    {
        "label": "TagAdmin",
        "kind": 6,
        "importPath": "backend.recipes.admin",
        "description": "backend.recipes.admin",
        "peekOfCode": "class TagAdmin(admin.ModelAdmin):\n    list_display = (\n        \"name\",\n        \"color\",\n        \"slug\",\n    )\n    list_filter = (\"name\",)\n@admin.register(TagInRecipe)\nclass TagInRecipeAdmin(admin.ModelAdmin):\n    list_display = (",
        "detail": "backend.recipes.admin",
        "documentation": {}
    },
    {
        "label": "TagInRecipeAdmin",
        "kind": 6,
        "importPath": "backend.recipes.admin",
        "description": "backend.recipes.admin",
        "peekOfCode": "class TagInRecipeAdmin(admin.ModelAdmin):\n    list_display = (\n        \"recipe\",\n        \"tag\",\n    )\n    list_filter = (\"tag\",)\n@admin.register(IngredientInRecipe)\nclass IngredientInRecipeAdmin(admin.ModelAdmin):\n    list_display = (\n        \"recipe\",",
        "detail": "backend.recipes.admin",
        "documentation": {}
    },
    {
        "label": "IngredientInRecipeAdmin",
        "kind": 6,
        "importPath": "backend.recipes.admin",
        "description": "backend.recipes.admin",
        "peekOfCode": "class IngredientInRecipeAdmin(admin.ModelAdmin):\n    list_display = (\n        \"recipe\",\n        \"ingredient\",\n        \"amount\",\n    )\n    list_filter = (\"ingredient\",)\n@admin.register(Favorite)\nclass FavoriteAdmin(admin.ModelAdmin):\n    list_display = (",
        "detail": "backend.recipes.admin",
        "documentation": {}
    },
    {
        "label": "FavoriteAdmin",
        "kind": 6,
        "importPath": "backend.recipes.admin",
        "description": "backend.recipes.admin",
        "peekOfCode": "class FavoriteAdmin(admin.ModelAdmin):\n    list_display = (\n        \"recipe\",\n        \"user\",\n    )\n    list_filter = (\"recipe\",)\n@admin.register(ShoppingCart)\nclass ShoppingCartAdmin(admin.ModelAdmin):\n    list_display = (\n        \"recipe\",",
        "detail": "backend.recipes.admin",
        "documentation": {}
    },
    {
        "label": "ShoppingCartAdmin",
        "kind": 6,
        "importPath": "backend.recipes.admin",
        "description": "backend.recipes.admin",
        "peekOfCode": "class ShoppingCartAdmin(admin.ModelAdmin):\n    list_display = (\n        \"recipe\",\n        \"user\",\n    )\n    list_filter = (\"recipe\",)",
        "detail": "backend.recipes.admin",
        "documentation": {}
    },
    {
        "label": "RecipesConfig",
        "kind": 6,
        "importPath": "backend.recipes.apps",
        "description": "backend.recipes.apps",
        "peekOfCode": "class RecipesConfig(AppConfig):\n    default_auto_field = \"django.db.models.BigAutoField\"\n    name = \"recipes\"",
        "detail": "backend.recipes.apps",
        "documentation": {}
    },
    {
        "label": "Ingredient",
        "kind": 6,
        "importPath": "backend.recipes.models",
        "description": "backend.recipes.models",
        "peekOfCode": "class Ingredient(models.Model):\n    name = models.CharField(\n        max_length=200,\n        verbose_name=\"Название ингредиента\",\n        null=False,\n    )\n    measurement_unit = models.CharField(\n        max_length=200,\n        verbose_name=\"Единица измерения\",\n        null=False,",
        "detail": "backend.recipes.models",
        "documentation": {}
    },
    {
        "label": "Tag",
        "kind": 6,
        "importPath": "backend.recipes.models",
        "description": "backend.recipes.models",
        "peekOfCode": "class Tag(models.Model):\n    name = models.CharField(\n        max_length=200,\n        verbose_name=\"Название тэга\",\n        null=False,\n        unique=True,\n    )\n    color = models.CharField(\n        max_length=7,\n        verbose_name=\"Цвет тэга\",",
        "detail": "backend.recipes.models",
        "documentation": {}
    },
    {
        "label": "Recipe",
        "kind": 6,
        "importPath": "backend.recipes.models",
        "description": "backend.recipes.models",
        "peekOfCode": "class Recipe(models.Model):\n    author = models.ForeignKey(\n        User,\n        verbose_name=\"Автор\",\n        on_delete=models.CASCADE,\n        related_name=\"recipes\",\n    )\n    name = models.CharField(\n        max_length=200,\n        verbose_name=\"Название рецепта\",",
        "detail": "backend.recipes.models",
        "documentation": {}
    },
    {
        "label": "IngredientInRecipe",
        "kind": 6,
        "importPath": "backend.recipes.models",
        "description": "backend.recipes.models",
        "peekOfCode": "class IngredientInRecipe(models.Model):\n    recipe = models.ForeignKey(\n        Recipe, verbose_name=\"Рецепт\", related_name=\"recipe\", on_delete=models.CASCADE\n    )\n    ingredient = models.ForeignKey(\n        Ingredient,\n        verbose_name=\"Ингредиент\",\n        related_name=\"ingredient_in_recipe\",\n        on_delete=models.CASCADE,\n    )",
        "detail": "backend.recipes.models",
        "documentation": {}
    },
    {
        "label": "TagInRecipe",
        "kind": 6,
        "importPath": "backend.recipes.models",
        "description": "backend.recipes.models",
        "peekOfCode": "class TagInRecipe(models.Model):\n    recipe = models.ForeignKey(\n        Recipe, verbose_name=\"Рецепт\", related_name=\"recipes\", on_delete=models.CASCADE\n    )\n    tag = models.ForeignKey(\n        Tag, verbose_name=\"Тэг\", related_name=\"tag_in_recipe\", on_delete=models.CASCADE\n    )\n    class Meta:\n        verbose_name = \"Тэг рецепта\"\n        verbose_name_plural = \"Тэги рецепта\"",
        "detail": "backend.recipes.models",
        "documentation": {}
    },
    {
        "label": "Favorite",
        "kind": 6,
        "importPath": "backend.recipes.models",
        "description": "backend.recipes.models",
        "peekOfCode": "class Favorite(models.Model):\n    recipe = models.ForeignKey(\n        Recipe, related_name=\"favorite_recipe\", on_delete=models.CASCADE\n    )\n    user = models.ForeignKey(\n        User, related_name=\"favorite_user\", on_delete=models.CASCADE\n    )\n    class Meta:\n        verbose_name = \"Избранный рецепт\"\n        verbose_name_plural = \"Избранные рецепты\"",
        "detail": "backend.recipes.models",
        "documentation": {}
    },
    {
        "label": "ShoppingCart",
        "kind": 6,
        "importPath": "backend.recipes.models",
        "description": "backend.recipes.models",
        "peekOfCode": "class ShoppingCart(models.Model):\n    user = models.ForeignKey(\n        User,\n        on_delete=models.CASCADE,\n        related_name=\"shopping_cart\",\n        verbose_name=\"Пользователь\",\n    )\n    recipe = models.ForeignKey(\n        Recipe,\n        on_delete=models.CASCADE,",
        "detail": "backend.recipes.models",
        "documentation": {}
    },
    {
        "label": "UserAdmin",
        "kind": 6,
        "importPath": "backend.users.admin",
        "description": "backend.users.admin",
        "peekOfCode": "class UserAdmin(admin.ModelAdmin):\n    list_display = (\n        \"username\",\n        \"email\",\n        \"first_name\",\n        \"last_name\",\n    )\n    list_filter = (\n        \"username\",\n        \"email\",",
        "detail": "backend.users.admin",
        "documentation": {}
    },
    {
        "label": "SubscribesAdmin",
        "kind": 6,
        "importPath": "backend.users.admin",
        "description": "backend.users.admin",
        "peekOfCode": "class SubscribesAdmin(admin.ModelAdmin):\n    list_display = (\n        \"author\",\n        \"user\",\n    )\n    list_filter = (\"author\",)",
        "detail": "backend.users.admin",
        "documentation": {}
    },
    {
        "label": "UsersConfig",
        "kind": 6,
        "importPath": "backend.users.apps",
        "description": "backend.users.apps",
        "peekOfCode": "class UsersConfig(AppConfig):\n    default_auto_field = \"django.db.models.BigAutoField\"\n    name = \"users\"",
        "detail": "backend.users.apps",
        "documentation": {}
    },
    {
        "label": "User",
        "kind": 6,
        "importPath": "backend.users.models",
        "description": "backend.users.models",
        "peekOfCode": "class User(AbstractUser):\n    username = models.CharField(\n        max_length=150,\n        verbose_name=\"Логин\",\n        help_text=\"Укажите логин\",\n        unique=True,\n    )\n    email = models.EmailField(\n        max_length=254,\n        verbose_name=\"Email address\",",
        "detail": "backend.users.models",
        "documentation": {}
    },
    {
        "label": "Subscribes",
        "kind": 6,
        "importPath": "backend.users.models",
        "description": "backend.users.models",
        "peekOfCode": "class Subscribes(models.Model):\n    author = models.ForeignKey(\n        User,\n        on_delete=models.CASCADE,\n        verbose_name=\"Автор рецепта\",\n        related_name=\"subscribed\",\n    )\n    user = models.ForeignKey(\n        User,\n        on_delete=models.CASCADE,",
        "detail": "backend.users.models",
        "documentation": {}
    },
    {
        "label": "main",
        "kind": 2,
        "importPath": "backend.manage",
        "description": "backend.manage",
        "peekOfCode": "def main():\n    \"\"\"Run administrative tasks.\"\"\"\n    os.environ.setdefault(\"DJANGO_SETTINGS_MODULE\", \"foodgram_backend.settings\")\n    try:\n        from django.core.management import execute_from_command_line\n    except ImportError as exc:\n        raise ImportError(\n            \"Couldn't import Django. Are you sure it's installed and \"\n            \"available on your PYTHONPATH environment variable? Did you \"\n            \"forget to activate a virtual environment?\"",
        "detail": "backend.manage",
        "documentation": {}
    }
]